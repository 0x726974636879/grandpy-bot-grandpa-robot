{"version":3,"sources":["Components/Message.js","Contexts/ConversationContext.js","Contexts/LoaderContext.js","Components/MessageForm.js","Components/Main.js","Components/App.js","index.js"],"names":["Message","message","useState","apiKey","setApiKey","map","position","center","Number","lng","toFixed","lat","axios","get","then","response","data","key","catch","error","console","log","className","bootstrapURLKeys","language","options","mapTypeControl","scrollwheel","panControl","defaultCenter","defaultZoom","text","show_map","messageProperties","user","image","src","alt","class","hour","React","createContext","conversation","updateConversation","loaderStatus","updateLoaderStatus","SendMessage","setMessage","conversationContextValue","useContext","ConversationContext","loaderContextValue","LoaderContext","inputRef","useRef","onSubmit","event","preventDefault","msg","post","responseDescription","description","responseAddress","address","responsePosition","current","value","focus","ref","onChange","currentTarget","type","placeholder","required","Main","messageEndRef","styles","loader","visibility","display","alignItems","zIndex","width","height","backgroundColor","borderRadius","useEffect","setTimeout","scrollIntoView","behavior","Provider","style","href","id","marginBottom","MessageForm","App","setConversation","dialog","moment","locale","current_hour","format","Math","round","random","push","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.afb80ea4.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport axios from \"axios\";\n\n\nconst Message = ({ message }) => {\n    const [apiKey, setApiKey] = useState(null)\n\n    const handleUpdateKey = () => {\n        axios.get('/get_google_key')\n        .then((response) => setApiKey(response.data.key))\n        .catch((error) => console.log(error))\n    }\n\n    const get_properties = (user) => {\n        if (user !== \"Me\"){\n            return {\n                image: <img src=\"https://image.flaticon.com/icons/png/512/2115/2115916.png\" alt=\"grandpybot\" />,\n                class: \"\"\n            }\n        }\n        return {image: \"\", class: \"message-personal\"}\n    }\n\n    const show_map = (position) => {\n        const Marker = ({ text }) => <div className=\"pin bounce\">{text}<div className=\"pulse\"></div></div>;\n        const center = {\n            \"lng\": Number(position.lng.toFixed(3)),\n            \"lat\": Number(position.lat.toFixed(3))\n        }\n\n        handleUpdateKey()\n\n        if (apiKey === null) {\n            return (null);\n        }\n\n        return (\n            <div className=\"map\">\n                <GoogleMapReact\n                    bootstrapURLKeys={{ key: apiKey, language: \"fr\"}}\n                    options={{ mapTypeControl: false, scrollwheel: false, panControl: false }}\n                    defaultCenter={center}\n                    defaultZoom={15}\n                >\n                    <Marker lat={position.lat} lng={position.lng} />\n                </GoogleMapReact>\n            </div>\n        );\n    }\n\n    const map = \"position\" in message ? show_map(message.position) : \"\"\n    const messageProperties = get_properties(message.user)\n\n    return (\n        <div className={`message new ${messageProperties.class}`}>\n            <figure className=\"avatar\">\n                {messageProperties.image}\n            </figure>\n            {map}\n            {message.text}\n            <div className=\"timestampcheckmark\">\n                <div className=\"timestamp\">{message.hour}</div>\n                <div className=\"checkmark-read\">✓✓</div>\n            </div>\n        </div>\n    )\n}\n\nexport default Message;\n","import React from \"react\";\n\n\nexport default React.createContext({\n    conversation: null,\n    updateConversation: null\n})","import React from \"react\";\n\n\nexport default React.createContext({\n    loaderStatus: null,\n    updateLoaderStatus: null\n})","import React, { useContext, useState, useRef } from \"react\";\nimport axios from \"axios\";\n// Contexts\nimport ConversationContext from \"../Contexts/ConversationContext\";\nimport LoaderContext from \"../Contexts/LoaderContext\"\n\n\nconst SendMessage = () => {\n    const [message, setMessage] = useState(\"\");\n    const conversationContextValue = useContext(ConversationContext);\n    const loaderContextValue = useContext(LoaderContext);\n    const inputRef = useRef()\n\n    const handleChange = event => {\n        // Get the written message.\n        const msg = event.currentTarget.value;\n        // Put the message in the state.\n        setMessage(msg);\n    }\n\n    const handleSubmit = event => {\n        // Stop the initial action that reset the page.\n        event.preventDefault();\n        const msg = message\n        // Add the user message to the conversation.\n        conversationContextValue.updateConversation({\n            \"user\": \"Me\",\n            \"text\": msg\n        })\n        // Show the loader.\n        loaderContextValue.updateLoaderStatus('visible')\n        // Send the message to Flask Background with Axios package.\n        axios.post('/askbot', {\n            message: msg\n        })\n            .then((response) => {\n                // Get the response data.\n                const responseDescription = response.data.description;\n                const responseAddress = response.data.address;\n                const responsePosition = response.data.position;\n\n                if (responseAddress) {\n                    let response = {\n                        \"user\": \"GrandPY\",\n                        \"text\": responseAddress\n                    }\n                    if (responsePosition) {\n                        response[\"position\"] = {\n                            \"lng\": responsePosition.lng,\n                            \"lat\": responsePosition.lat\n                        }\n                    }\n                    conversationContextValue.updateConversation(response);\n                }\n                conversationContextValue.updateConversation({\n                    \"user\": \"GrandPY\",\n                    \"text\": responseDescription\n                });\n                loaderContextValue.updateLoaderStatus('hidden')\n            })\n            .catch((error) => console.log(error));\n        inputRef.current.value = ''\n        inputRef.current.focus()\n    }\n\n    return (\n        <div className=\"message-box\">\n            <form className=\"message-input\" onSubmit={handleSubmit}>\n                <input\n                    ref={inputRef}\n                    onChange={handleChange}\n                    type=\"text\"\n                    className=\"message-input\"\n                    placeholder=\"Ask your question...\"\n                    required\n                />\n                <button type=\"submit\" className=\"message-submit\">Send</button>\n            </form>\n        </div>\n    )\n}\nexport default SendMessage;\n","import React, { useState, useContext, useRef, useEffect } from \"react\";\nimport ReactLoading from \"react-loading\";\n// Components\nimport Message from \"./Message\";\nimport MessageForm from \"./MessageForm\";\n// Contexts\nimport ConversationContext from \"../Contexts/ConversationContext\"\nimport LoaderContext from \"../Contexts/LoaderContext\"\n\nconst Main = () => {\n    const conversationContextValue = useContext(ConversationContext)\n    const [loaderStatus, setLoaderStatus] = useState(\"hidden\");\n    const loaderContextValue = {\n        loaderStatus: loaderStatus,\n        updateLoaderStatus: setLoaderStatus\n    };\n    const messageEndRef = useRef(null)\n    const styles = {\n        loader: {\n            visibility: loaderStatus,\n            display: 'flex',\n            alignItems: 'center',\n            'justifyContent': 'center',\n            zIndex: '999',\n            position: 'absolute',\n            width: '100%',\n            height: '94%',\n            backgroundColor: 'rgba(239,239,239, 0.6)',\n            borderRadius: '20px'\n        }\n    }\n\n    useEffect(() => {\n        setTimeout(() => {\n            messageEndRef.current.scrollIntoView({ behavior: 'smooth'})\n            console.log('scroll !')\n        }, 100)\n    })\n\n    return (\n        <LoaderContext.Provider value={loaderContextValue}>\n            <section className=\"avenue-messenger\">\n                <div style={ styles.loader }>\n                    <ReactLoading type=\"bubbles\" style={{ width: '25%' }}/>\n                </div>\n                <div className=\"agent-face\">\n                    <div className=\"half\">\n                        <a href=\"/\">\n                            <img\n                                className=\"agent circle\"\n                                src=\"https://image.flaticon.com/icons/png/512/2115/2115916.png\"\n                                alt=\"grandpybot\"\n                            />\n                        </a>\n                    </div>\n                </div>\n                <div className=\"chat\">\n                    <div className=\"chat-title\">\n                        <h1>GrandPy</h1>\n                        <h2>Bot</h2>\n                    </div>\n                    <div className=\"messages\">\n                        {\n                            conversationContextValue.conversation.map(\n                                (message) => <Message key={message.id} message={message} />\n                            )\n                        }\n                        <div ref={messageEndRef} className=\"message\" style={{ marginBottom: \"0px\", visibility: \"hidden\"}} />\n                    </div>\n                    <MessageForm />\n                </div>\n            </section>\n        </LoaderContext.Provider>\n    )\n}\n\n\nexport default Main;\n","import React, { useState } from \"react\";\nimport moment from \"moment\";\n// Components\nimport Main from \"./Main\";\n// Contexts\nimport ConversationContext from \"../Contexts/ConversationContext\"\n// CSS\nimport './App.css'\n\n\nconst App = () => {\n    const [conversation, setConversation] = useState([\n        {\n            \"id\": 1,\n            \"user\": \"GrandPY\",\n            \"text\": \"Bonjour ! Bienvenue sur GrandPY Bot, pose une question relative à un lieu.\",\n            \"hour\": \"Now\"\n        }\n    ]);\n\n    // List all of messages exchange between the human and the bot.\n    const handleAdd = message => {\n        // Get all messages.\n        const dialog = conversation\n        // Add the current hour.\n        moment.locale('fr');\n        const current_hour = moment().format('LT');\n        message[\"hour\"] = current_hour\n        // Add an id to the message.\n        message[\"id\"] = Math.round(Math.random() * 100000)\n        // Put the message to all messages list.\n        dialog.push(message)\n        // Replace the messages in the state.\n        setConversation([...dialog])\n    };\n\n    const conversationContextValue = {\n        conversation: conversation,\n        updateConversation: handleAdd\n    };\n\n\n    return (\n        <ConversationContext.Provider value={conversationContextValue}>\n            <Main />\n        </ConversationContext.Provider>\n    )\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./Components/App\";\n\n\nReactDOM.render(\n  <App />,\n  document.querySelector('#root')\n);\n"],"sourceRoot":""}