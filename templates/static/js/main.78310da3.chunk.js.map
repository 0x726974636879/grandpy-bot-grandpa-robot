{"version":3,"sources":["Components/Message.js","Contexts/ConversationContext.js","Components/MessageForm.js","Components/Main.js","Components/App.js","index.js"],"names":["Message","message","useState","apiKey","setApiKey","map","position","center","Number","lng","toFixed","lat","axios","get","then","response","data","key","catch","error","console","log","className","bootstrapURLKeys","language","options","mapTypeControl","scrollwheel","panControl","defaultCenter","defaultZoom","text","show_map","messageProperties","user","image","src","alt","class","hour","React","createContext","conversation","updateConversation","SendMessage","setMessage","conversationContextValue","useContext","ConversationContext","onSubmit","event","preventDefault","msg","post","responseDescription","description","responseAddress","address","responsePosition","document","querySelector","reset","onChange","currentTarget","value","type","placeholder","required","Main","contextValue","href","id","MessageForm","App","setConversation","conv","moment","locale","current_hour","format","Math","round","random","push","useEffect","scrollIntoView","Provider","ReactDOM","render"],"mappings":"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","file":"static/js/main.78310da3.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport axios from \"axios\";\n\n\nconst Message = ({ message }) => {\n    const [apiKey, setApiKey] = useState(null)\n\n    const handleUpdateKey = () => {\n        axios.get('http://localhost:8000/get_google_key')\n        .then((response) => setApiKey(response.data.key))\n        .catch((error) => console.log(error))\n    }\n\n    const get_properties = (user) => {\n        if (user !== \"Me\"){\n            return {\n                image: <img src=\"https://image.flaticon.com/icons/png/512/2115/2115916.png\" alt=\"grandpybot\" />,\n                class: \"\"\n            }\n        }\n        return {image: \"\", class: \"message-personal\"}\n    }\n\n    const show_map = (position) => {\n        const Marker = ({ text }) => <div className=\"pin bounce\">{text}<div className=\"pulse\"></div></div>;\n        const center = {\n            \"lng\": Number(position.lng.toFixed(3)),\n            \"lat\": Number(position.lat.toFixed(3))\n        }\n\n        handleUpdateKey()\n\n        if (apiKey === null) {\n            return (null);\n        }\n\n        return (\n            <div className=\"map\">\n                <GoogleMapReact\n                    bootstrapURLKeys={{ key: apiKey, language: \"fr\"}}\n                    options={{ mapTypeControl: false, scrollwheel: false, panControl: false }}\n                    defaultCenter={center}\n                    defaultZoom={15}\n                >\n                    <Marker lat={position.lat} lng={position.lng} />\n                </GoogleMapReact>\n            </div>\n        );\n    }\n\n    const map = \"position\" in message ? show_map(message.position) : \"\"\n    const messageProperties = get_properties(message.user)\n\n    return (\n        <div className={`message new ${messageProperties.class}`}>\n            <figure className=\"avatar\">\n                {messageProperties.image}\n            </figure>\n            {map}\n            {message.text}\n            <div className=\"timestamp\">{message.hour}</div>\n            <div className=\"checkmark-read\">✓✓</div>\n        </div>\n    )\n}\n\nexport default Message;\n","import React from \"react\";\n\n\nexport default React.createContext({\n    conversation: null,\n    updateConversation: null\n})","import React, { useContext, useState } from \"react\";\nimport axios from \"axios\";\n// Contexts\nimport ConversationContext from \"../Contexts/ConversationContext\";\n\n\nconst SendMessage = () => {\n    const [message, setMessage] = useState(\"\");\n    const conversationContextValue = useContext(ConversationContext);\n\n    const handleChange = event => {\n        // Get the written message.\n        const msg = event.currentTarget.value;\n        // Put the message in the state.\n        setMessage(msg);\n    }\n\n    const handleSubmit = event => {\n        // Stop the initial action that reset the page.\n        event.preventDefault();\n        const msg = message\n        // Add the user message to the conversation.\n        conversationContextValue.updateConversation({\n            \"user\": \"Me\",\n            \"text\": msg\n        })\n        // Send the message to Flask Background with Axios package.\n        axios.post('http://localhost:8000/askbot', {\n            message: msg\n        })\n            .then((response) => {\n                // Get the response data.\n                const responseDescription = response.data.description;\n                const responseAddress = response.data.address;\n                const responsePosition = response.data.position;\n\n                if (responseAddress) {\n                    let response = {\n                        \"user\": \"GrandPY\",\n                        \"text\": responseAddress\n                    }\n                    if (responsePosition) {\n                        response[\"position\"] = {\n                            \"lng\": responsePosition.lng,\n                            \"lat\": responsePosition.lat\n                        }\n                    }\n                    conversationContextValue.updateConversation(response);\n                }\n                conversationContextValue.updateConversation({\n                    \"user\": \"GrandPY\",\n                    \"text\": responseDescription\n                });\n            })\n            .catch((error) => console.log(error));\n        document.querySelector('.message-input').reset();\n    }\n\n    return (\n        <div className=\"message-box\">\n            <form className=\"message-input\" onSubmit={handleSubmit}>\n                <input\n                    onChange={handleChange}\n                    type=\"text\"\n                    className=\"message-input\"\n                    placeholder=\"Ask your question...\"\n                    required\n                />\n                <button type=\"submit\" className=\"message-submit\">Send</button>\n            </form>\n        </div>\n    )\n}\nexport default SendMessage;\n","import React, { useContext } from \"react\";\n// Components\nimport Message from \"./Message\";\nimport MessageForm from \"./MessageForm\";\n// Contexts\nimport ConversationContext from \"../Contexts/ConversationContext\"\n\nconst Main = () => {\n    const contextValue = useContext(ConversationContext)\n\n    return (\n            <section className=\"avenue-messenger\">\n                <div className=\"agent-face\">\n                    <div className=\"half\">\n                        <a href=\"/\">\n                            <img\n                                className=\"agent circle\"\n                                src=\"https://image.flaticon.com/icons/png/512/2115/2115916.png\"\n                                alt=\"grandpy bot\"\n                            />\n                        </a>\n                    </div>\n                </div>\n                <div className=\"chat\">\n                    <div className=\"chat-title\">\n                        <h1>GrandPy</h1>\n                        <h2>Bot</h2>\n                    </div>\n                    <div className=\"messages\">\n                        {\n                            contextValue.conversation.map(\n                                (message) => <Message key={message.id} message={message} />\n                            )\n                        }\n                    </div>\n                    <MessageForm />\n                </div>\n            </section>\n    )\n}\n\n\nexport default Main;\n","import React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\n// Components\nimport Main from \"./Main\";\n// Contexts\nimport ConversationContext from \"../Contexts/ConversationContext\"\n// CSS\nimport './App.css'\n\n\nconst App = () => {\n    const [conversation, setConversation] = useState([\n        {\n            \"id\": 1,\n            \"user\": \"GrandPY\",\n            \"text\": \"Bonjour ! Bienvenue sur GrandPY Bot, pose une question relative à un lieu.\",\n            \"hour\": \"Now\"\n        }\n    ]);\n\n    // List all of messages exchange between the human and the bot.\n    const handleAdd = message => {\n        // Get all messages.\n        const conv = conversation\n        // Add the current hour.\n        moment.locale('fr');\n        const current_hour = moment().format('LT');\n        message[\"hour\"] = current_hour\n        // Add an id to the message.\n        message[\"id\"] = Math.round(Math.random() * 100000)\n        // Put the message to all messages list.\n        conv.push(message)\n        // Replace the messages in the state.\n        setConversation([...conv])\n    };\n\n    const conversationContextValue = {\n        conversation: conversation,\n        updateConversation: handleAdd\n    };\n\n    // Scroll into the last message.\n    useEffect(() => {\n        let last_message = document.querySelector('.message:nth-last-child(1)');\n        last_message.scrollIntoView(true)\n    });\n\n    return (\n        <ConversationContext.Provider value={conversationContextValue}>\n            <Main />\n        </ConversationContext.Provider>\n    )\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./Components/App\";\n\n\nReactDOM.render(\n  <App />,\n  document.querySelector('#root')\n);\n"],"sourceRoot":""}