{"version":3,"sources":["Contexts/ApiKeyContext.js","Components/Message.js","Contexts/ConversationContext.js","Components/MessageForm.js","Components/Main.js","Components/App.js","index.js"],"names":["React","createContext","apiKey","updateApiKey","Message","message","apiKeyContextValue","useContext","ApiKeyContext","messageProperties","user","image","src","alt","class","map","position","center","Number","lng","toFixed","lat","style","width","height","bootstrapURLKeys","key","language","options","mapTypeControl","scrollwheel","panControl","defaultCenter","defaultZoom","text","className","show_map","hour","conversation","updateConversation","SendMessage","useState","setMessage","conversationContextValue","ConversationContext","onSubmit","event","preventDefault","msg","axios","post","then","response","responseDescription","data","description","responseAddress","address","responsePosition","catch","error","console","log","document","querySelector","reset","onChange","currentTarget","value","type","placeholder","required","Main","contextValue","href","id","MessageForm","App","setConversation","setApiKey","conv","moment","locale","current_hour","format","Math","round","random","push","get","useEffect","scrollIntoView","Provider","ReactDOM","render"],"mappings":"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","file":"static/js/main.2c35b642.chunk.js","sourcesContent":["import React from \"react\";\n\n\nexport default React.createContext({\n    apiKey: null,\n    updateApiKey: null\n})\n","import React, { useContext } from 'react';\nimport GoogleMapReact from 'google-map-react';\n// Contexts\nimport ApiKeyContext from \"../Contexts/ApiKeyContext\"\n\n\n\nconst get_properties = (user) => {\n    if (user !== \"Me\"){\n        return {\n            image: <img src=\"https://image.flaticon.com/icons/png/512/2115/2115916.png\" alt=\"grandpybot\" />,\n            class: \"\"\n        }\n    }\n    return {image: \"\", class: \"message-personal\"}\n}\n\nconst show_map = (position, apiKey) => {\n    const Marker = ({ text }) => <div className=\"pin bounce\">{text}<div className=\"pulse\"></div></div>;\n    const center = {\n        \"lng\": Number(position.lng.toFixed(3)),\n        \"lat\": Number(position.lat.toFixed(3))\n    }\n    const mapStyles = {\n        width: '400px',\n        height: '50vh'\n    };\n\n    return (\n        <div style={mapStyles}>\n            <GoogleMapReact\n                bootstrapURLKeys={{\n                    key: apiKey,\n                    language: \"fr\"\n                }}\n                options={{\n                    mapTypeControl: false,\n                    scrollwheel: false,\n                    panControl: false,\n                }}\n\n                defaultCenter={center}\n                defaultZoom={15}\n            >\n                <Marker\n                    lat={position.lat}\n                    lng={position.lng}\n\n                />\n            </GoogleMapReact>\n        </div>\n    );\n}\n\n\nconst Message = ({ message }) => {\n    const apiKeyContextValue = useContext(ApiKeyContext)\n    let messageProperties = get_properties(message.user)\n    let map = \"\"\n    if (\"position\" in message){\n        map = show_map(message.position, apiKeyContextValue.apiKey)\n        apiKeyContextValue.updateApiKey(\"\")\n    }\n\n    return (\n        <div className={`message new ${messageProperties.class}`}>\n            <figure className=\"avatar\">\n                {messageProperties.image}\n            </figure>\n            {map}\n            {message.text}\n            <div className=\"timestamp\">{message.hour}</div>\n            <div className=\"checkmark-read\">✓✓</div>\n        </div>\n    )\n}\n\nexport default Message;\n","import React from \"react\";\n\n\nexport default React.createContext({\n    conversation: null,\n    updateConversation: null\n})","import React, { useContext, useState } from \"react\";\nimport axios from \"axios\";\n// Contexts\nimport ConversationContext from \"../Contexts/ConversationContext\";\nimport ApiKeyContext from \"../Contexts/ApiKeyContext\"\n\n\nconst SendMessage = () => {\n    const [message, setMessage] = useState(\"\");\n    const conversationContextValue = useContext(ConversationContext);\n    const apiKeyContextValue = useContext(ApiKeyContext)\n\n    const handleChange = event => {\n        // Get the written message.\n        const msg = event.currentTarget.value;\n        // Put the message in the state.\n        setMessage(msg);\n    }\n\n    const handleSubmit = event => {\n        // Stop the initial action that reset the page.\n        event.preventDefault();\n        const msg = message\n        // Add the user message to the conversation.\n        conversationContextValue.updateConversation({\n            \"user\": \"Me\",\n            \"text\": msg\n        })\n        // Send the message to Flask Background with Axios package.\n        axios.post('/askbot', {\n            message: msg\n        })\n            .then((response) => {\n                // Get the response data.\n                const responseDescription = response.data.description;\n                const responseAddress = response.data.address;\n                const responsePosition = response.data.position;\n\n                if (responseAddress) {\n                    let response = {\n                        \"user\": \"GrandPY\",\n                        \"text\": responseAddress\n                    }\n                    if (responsePosition) {\n                        response[\"position\"] = {\n                            \"lng\": responsePosition.lng,\n                            \"lat\": responsePosition.lat\n                        }\n                        apiKeyContextValue.updateApiKey()\n                    }\n                    conversationContextValue.updateConversation(response);\n                }\n                conversationContextValue.updateConversation({\n                    \"user\": \"GrandPY\",\n                    \"text\": responseDescription\n                });\n            })\n            .catch((error) => console.log(error));\n        document.querySelector('.message-input').reset();\n    }\n\n    return (\n        <div className=\"message-box\">\n            <form className=\"message-input\" onSubmit={handleSubmit}>\n                <input\n                    onChange={handleChange}\n                    type=\"text\"\n                    className=\"message-input\"\n                    placeholder=\"Ask your question...\"\n                    required\n                />\n                <button type=\"submit\" className=\"message-submit\">Send</button>\n            </form>\n        </div>\n    )\n}\nexport default SendMessage;\n","import React, { useContext } from \"react\";\n// Components\nimport Message from \"./Message\";\nimport MessageForm from \"./MessageForm\";\n// Contexts\nimport ConversationContext from \"../Contexts/ConversationContext\"\n\nconst Main = () => {\n    const contextValue = useContext(ConversationContext)\n\n    return (\n            <section className=\"avenue-messenger\">\n                <div className=\"agent-face\">\n                    <div className=\"half\">\n                        <a href=\"/\">\n                            <img\n                                className=\"agent circle\"\n                                src=\"https://image.flaticon.com/icons/png/512/2115/2115916.png\"\n                                alt=\"grandpy bot\"\n                            />\n                        </a>\n                    </div>\n                </div>\n                <div className=\"chat\">\n                    <div className=\"chat-title\">\n                        <h1>GrandPy</h1>\n                        <h2>Bot</h2>\n                    </div>\n                    <div className=\"messages\">\n                        {\n                            contextValue.conversation.map(\n                                (message) => <Message key={message.id} message={message} />\n                            )\n                        }\n                    </div>\n                    <MessageForm />\n                </div>\n            </section>\n    )\n}\n\n\nexport default Main;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport moment from \"moment\";\n// Components\nimport Main from \"./Main\";\n// Contexts\nimport ConversationContext from \"../Contexts/ConversationContext\"\nimport ApiKeyContext from \"../Contexts/ApiKeyContext\"\n\n\nconst App = () => {\n    const [conversation, setConversation] = useState([\n        {\n            \"id\": 1,\n            \"user\": \"GrandPY\",\n            \"text\": \"Bonjour ! Bienvenue sur GrandPY Bot, pose une question relative à un lieu.\",\n            \"hour\": \"Now\"\n        }\n    ]);\n\n    const [apiKey, setApiKey] = useState(\"\")\n    // List all of messages exchange between the human and the bot.\n    const handleAdd = message => {\n        // Get all messages.\n        const conv = conversation\n        // Add the current hour.\n        moment.locale('fr');\n        const current_hour = moment().format('LT');\n        message[\"hour\"] = current_hour\n        // Add an id to the message.\n        message[\"id\"] = Math.round(Math.random() * 100000)\n        // Put the message to all messages list.\n        conv.push(message)\n        // Replace the messages in the state.\n        setConversation([...conv])\n    };\n\n    const handleUpdateKey = () => {\n        axios.get('/get_google_key')\n        .then((response) => setApiKey(response.data.key))\n        .catch((error) => console.log(error))\n    }\n    const conversationContextValue = {\n        conversation: conversation,\n        updateConversation: handleAdd\n    };\n\n    const apiKeyContextValue = {\n        apiKey: apiKey,\n        updateApiKey: handleUpdateKey\n    };\n\n    // Scroll into the last message.\n    useEffect(() => {\n        let last_message = document.querySelector('.message:nth-last-child(1)');\n        last_message.scrollIntoView(true)\n    });\n\n    return (\n        <ConversationContext.Provider value={conversationContextValue}>\n            <ApiKeyContext.Provider value={apiKeyContextValue}>\n                <Main />\n            </ApiKeyContext.Provider>\n        </ConversationContext.Provider>\n    )\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./Components/App\";\n\n\nReactDOM.render(\n  <App />,\n  document.querySelector('#root')\n);\n"],"sourceRoot":""}